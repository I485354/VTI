# .github/workflows/ci.yml
name: CI Workflow

on:
  push:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  pull_request:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  workflow_dispatch:

jobs:
  frontend:
    name: Frontend CI
    needs: backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        working-directory: VTI-frontend
        run: npm install

      - name: Run lint
        working-directory: VTI-frontend
        run: npm run lint

      - name: Build project
        working-directory: VTI-frontend
        run: npm run build --prod

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run:  |
          OUTPUT=$(npx vercel deploy VTI-frontend/ --yes  --token=$VERCEL_TOKEN)
          echo "$OUTPUT"
          DEPLOY_URL=$(echo "$OUTPUT" | grep -oP 'https?://\S+' | head -n 1)
          echo "Deployment URL: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Alias Deployment to Custom Domain
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [ -z "$DEPLOY_URL" ]; then
            echo "No deployment URL found!"
            exit 1
          fi
          npx vercel alias $DEPLOY_URL vti-frontend.vercel.app --token=$VERCEL_TOKEN
    
      - name: Run Cypress tests
        working-directory: VTI-frontend
        env:
          BASE_URL: ${{ env.NGROK_URL }}
        run: |
          npm install cypress
          echo "BASE_URL is: $BASE_URL"
          npx cypress run --spec "cypress/e2e/api_check.cy.js"
          npx cypress run

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

            
      - name: Create Docker Network
        run: |
          docker network ls | grep vti-network || docker network create vti-network
  
      - name: Start MySQL Container
        run: |
          docker run -d --name mysql-database --network vti-network -e MYSQL_DATABASE=VTI_database -e MYSQL_USER=VTI -e MYSQL_PASSWORD=VTI-database1234 -e MYSQL_ROOT_PASSWORD=rootpassword mysql:latest

      - name: Build Backend Docker Image
        run: |
          docker build -t vti-backend ./VTI-backend

      - name: Run Backend Container
        run: |
          docker run -d --name vti-backend --network vti-network -p 8080:8080 vti-backend

      - name: Run Tests
        run: |
          docker exec vti-backend mvn test -Dspring.profiles.active=test
  
      - name: Run SonarCloud Scan
        run: |
          docker exec vti-backend mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=I485354_VTI \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            
      - name: Expose Backend
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && \
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | tee /etc/apt/sources.list.d/ngrok.list && \
          apt update && apt install ngrok
          ngrok http 8080 --log=stdout > ngrok.log &
          sleep 5
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

  cleanup:
    name: Cleanup Resources
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: always() # Ensure this runs even if previous jobs fail

    steps:
      - name: Remove Backend Container
        run: |
          docker stop vti-backend || true
          docker rm vti-backend || true

      - name: Remove MySQL Container
        run: |
          docker stop mysql-database || true
          docker rm mysql-database || true

      - name: Remove Docker Network
        run: |
          docker network rm vti-network || true

