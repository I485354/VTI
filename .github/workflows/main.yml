# .github/workflows/ci.yml
name: CI Workflow

on:
  push:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  pull_request:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  workflow_dispatch:

jobs:
  frontend:
    name: Frontend CI
    needs: backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'

      - name: Install dependencies
        working-directory: VTI-frontend
        run: npm install

      - name: Run lint
        working-directory: VTI-frontend
        run: npm run lint

      - name: Build project
        working-directory: VTI-frontend
        run: npm run build --prod

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run:  |
          OUTPUT=$(npx vercel deploy VTI-frontend/ --yes  --token=$VERCEL_TOKEN)
          echo "$OUTPUT"
          DEPLOY_URL=$(echo "$OUTPUT" | grep -oP 'https?://\S+' | head -n 1)
          echo "Deployment URL: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Alias Deployment to Custom Domain
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          if [ -z "$DEPLOY_URL" ]; then
            echo "No deployment URL found!"
            exit 1
          fi
          npx vercel alias $DEPLOY_URL vti-frontend.vercel.app --token=$VERCEL_TOKEN
    
      - name: Run Cypress tests
        working-directory: VTI-frontend
        env:
          BASE_URL: ${{ env.DEPLOY_URL }} 
        run: |
          npm install cypress
          echo "BASE_URL is: $BASE_URL"
          npx cypress run --spec "cypress/e2e/api_check.cy.js"
          npx cypress run

  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: VTI_database
          MYSQL_USER: VTI
          MYSQL_PASSWORD: VTI-database1234
          MYSQL_ROOT_PASSWORD: rootpassword
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
  
      - name: Create Docker Network
        run: |
          docker network ls | grep vti-network || docker network create vti-network    
  
      - name: Start Existing Database Container
        run: |
          docker ps -a --filter "name=mysql-database" --format "{{.Names}}" | grep mysql-database || \
          docker run -d --name mysql-database --network vti-network -e MYSQL_DATABASE=VTI_database -e MYSQL_USER=VTI -e MYSQL_PASSWORD=VTI-database1234 -e MYSQL_ROOT_PASSWORD=rootpassword mysql:latest
  
      - name: Wacht tot MySQL volledig is gestart
        run: |
          for i in {1..10}; do
            if docker exec mysql-database mysqladmin ping --silent; then
              echo "MySQL is beschikbaar."
              break
            fi
            echo "Wachten op MySQL..."
            sleep 5
          done
  
      - name: Build Backend Docker Image
        run: |
          docker build -t vti-backend ./VTI-backend
  
      - name: Run Backend Container
        run: |
          docker run -d --name vti-backend --network vti-network -p 8080:8080 vti-backend
  
      - name: Run Tests in Backend Container
        run: |
          docker exec vti-backend mvn test -Dspring.profiles.active=test
  
      - name: SonarCloud Scan
        working-directory: VTI-backend
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=I485354_VTI




            

      # Controleer of vti-network bestaat, maak het anders aan
    

     # - name: Build Backend Docker Image
     #   run: |
     #     docker build -t vti-backend ./VTI-backend

     # - name: Remove Existing Backend Container
     #   run: |
     #     docker rm -f vti-backend || echo "No existing backend container to remove."

      # Start de backendcontainer
     # - name: Run Backend Container
     #   run: |
     #     docker run -d --name vti-backend --network vti-network -p 8080:8080 vti-backend

      # Voer tests uit in een tijdelijke container
     # - name: Run Tests in Backend Container
     #   run: |
     #     docker run --rm --network vti-network \
     #       -e SPRING_PROFILES_ACTIVE=test \
     #       vti-backend mvn test

  

