name: CI Workflow

on:
  push:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  pull_request:
    paths:
      - 'VTI-frontend/**'
      - 'VTI-backend/**'
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: VTI_database
          MYSQL_USER: VTI
          MYSQL_PASSWORD: VTI-database1234
          MYSQL_ROOT_PASSWORD: rootpassword
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # 1. Code ophalen
      - name: Check out
        uses: actions/checkout@v3

      # 2. JDK installeren
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # 3. Wachten op MySQL-service
      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" --silent; do
            sleep 1
          done

      # 4. (Optioneel) Database-import of extra scripts
      # - name: Import DB from dump
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y mysql-client
      #     mysql -h 127.0.0.1 -u VTI -pVTI-database1234 VTI_database < VTI_database_backup.sql

      # 5. Backend build + test + (optioneel) coverage
      - name: Build and Test backend
        run: |
          cd VTI-backend
          # Zorg dat je tests NIET skipt, zodat je coverage krijgt
          mvn clean verify -Dspring.profiles.active=test

      # 6. SonarCloud-scan (optioneel)
      - name: SonarCloud Scan
        working-directory: VTI-backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=I485354_VTI \
            -Dsonar.login=${{ env.SONAR_TOKEN }}
          # Eventueel extra properties voor coverage, bv:
          # -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # 7. Backend in de achtergrond starten
      - name: Start backend (background)
        run: |
          cd VTI-backend
          nohup mvn spring-boot:run -Dspring-boot.run.profiles=test &

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend..."
            sleep 2
          done

      # 8. Node installeren voor frontend
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'
          
      # 9. Frontend build
      - name: Install & Build frontend
        run: |
          cd VTI-frontend
          npm install
          npm run build

      # 10. Frontend starten (achtergrond)
      - name: Start frontend (background)
        run: |
          cd VTI-frontend
          nohup npm run start &

      - name: Wait for frontend
        run: |
          for i in {1..30}; do
            if nc -z localhost 3000; then
              echo "Frontend is up!"
              break
            fi
            echo "Waiting for frontend..."
            sleep 2
          done

      # 11. Cypress tests
      - name: Cypress tests
        run: |
          cd VTI-frontend
          npm install cypress
          npx cypress run

      # 12. (Optioneel) Deploy naar Vercel
      - name: Deploy to Vercel
        if: success() # alleen bij geslaagde tests
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          OUTPUT=$(npx vercel deploy --yes --token=$VERCEL_TOKEN) --name=vti-frontend
          echo "$OUTPUT"
          DEPLOY_URL=$(echo "$OUTPUT" | grep -oP 'https?://\S+' | head -n 1)
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV
          npx vercel alias "$DEPLOY_URL" vti-frontend.vercel.app --token=$VERCEL_TOKEN


